#!/usr/bin/python

import subprocess
import os
import sys
import json
sys.path.insert(0, '/usr/local/munki')
sys.path.insert(0, '/usr/local/munkireport')
from Foundation import CFPreferencesCopyAppValue
from munkilib import FoundationPlist

def get_pref_value(key, domain):
    value = CFPreferencesCopyAppValue(key, domain)
    if(value is not None):
        return value
    elif(value is not None and len(value) == 0):
        return ""
    else:
        return ""

def main():
    """Main"""
    # Create cache dir if it does not exist
    cachedir = '%s/cache' % os.path.dirname(os.path.realpath(__file__))
    if not os.path.exists(cachedir):
        os.makedirs(cachedir)
    separator = "="
    data = {}
    try:
        pl=FoundationPlist.readPlist("/Applications/NoMAD.app/Contents/Info.plist")
        data["nomad_version"] = pl['CFBundleShortVersionString']
    except:
        data["nomad_version"] = "Not Installed"
    try:
        nl=FoundationPlist.readPlist("/Library/Security/SecurityAgentPlugins/NoMADLoginAD.bundle/Contents/Info.plist")
        data["nomad_login_version"] = nl['CFBundleShortVersionString']
    except:
        data["nomad_login_version"] = "Not Installed"
    try:
        cmd = ["/usr/bin/security", "authorizationdb", "read", "system.login.console"]
        proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        stdout, _ = proc.communicate()
        if stdout:
            authdb = FoundationPlist.readPlistFromString(stdout)
    except (IOError, OSError):
        pass
    mechs = authdb["mechanisms"]
    for mech in mechs:
        if "NoMADLogin" in mech:
            data["nomad_login_enabled"] = True
        else:
            data["nomad_login_enabled"] = False

    data["nomad_user"] = get_pref_value('UserShortName', 'com.trusourcelabs.NoMAD')
    data["addomain"] = get_pref_value('ADDomain', 'com.trusourcelabs.NoMAD')
    data["kerberos_realm"] = get_pref_value('KerberosRealm', 'com.trusourcelabs.NoMAD')
    data["nomad_enabled"] = int(get_pref_value('SignedIn', 'com.trusourcelabs.NoMAD'))
    data["local_password_sync"] = int(get_pref_value('LocalPasswordSync', 'com.trusourcelabs.NoMAD'))
    data["use_keychain"] = int(get_pref_value('UseKeychain', 'com.trusourcelabs.NoMAD'))

    # Write memory results to cache
    output_file = os.path.join(cachedir, 'nomad.json')
    with open(output_file, 'w') as fp:
        json.dump(data, fp, indent=4, sort_keys=True)

if __name__ == "__main__":
    main()
